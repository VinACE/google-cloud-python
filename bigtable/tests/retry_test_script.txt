# This retry script is processed by the retry server and the client under test.
# Client tests should parse any command beginning with "CLIENT:", send the corresponding RPC
# to the retry server and expect a valid response.
# "EXPECT" commands indicate the call the server is expecting the client to send.
#
# The retry server has one table named "table" that should be used for testing.
# There are three types of commands supported:
# READ <comma-separated list of row ids to read>
#     Expect the corresponding rows to be returned with arbitrary values.
# SCAN <range>... <comma separated list of row ids to expect>
#     Ranges are expressed as an interval with either open or closed start and end,
#     such as [1,3) for "1,2" or (1, 3] for "2,3".
# WRITE <comma-separated list of row ids to write>
#     All writes should succeed eventually. Value payload is ignored.
# The server writes PASS or FAIL on a line by itself to STDOUT depending on the result of the test.
# All other server output should be ignored.

# Echo same scan back after immediate error
CLIENT: SCAN [r1,r3) r1,r2
EXPECT: SCAN [r1,r3)
SERVER: ERROR Unavailable
EXPECT: SCAN [r1,r3)
SERVER: READ_RESPONSE r1,r2

# Retry scans with open interval starting at the least read row key.
# Instead of using open intervals for retry ranges, '\x00' can be
# appended to the last received row key and sent in a closed interval.
CLIENT: SCAN [r1,r9) r1,r2,r3,r4,r5,r6,r7,r8
EXPECT: SCAN [r1,r9)
SERVER: READ_RESPONSE r1,r2,r3,r4
SERVER: ERROR Unavailable
EXPECT: SCAN (r4,r9)
SERVER: ERROR Unavailable
EXPECT: SCAN (r4,r9)
SERVER: READ_RESPONSE r5,r6,r7
SERVER: ERROR Unavailable
EXPECT: SCAN (r7,r9)
SERVER: READ_RESPONSE r8
